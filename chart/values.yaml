## mysql image version
## ref: https://hub.docker.com/r/library/mysql/tags/
##

##
# Docker deets
replicas: 1
badgr_image_repository: azurecr.io
badgr_image_name: badgr-server
badgr_image_namespace: whoalxp
# likely over written by the Argo definition
badgr_image_tag: 0.2.0

# fullnameOverrideDb: badgr-mysql
serverName: badgr

# File storage settings
# https://github.com/WHOAcademy/lxp-docs/blob/master/docs/Creating_new_storageclass.adoc
badgr_storage:
  enabled: true
  # 595 photos can be stored in a 1Gi storage as an average, we can increase this based 
  # on the requirement for other environments
  volume_capacity: 2Gi
  storageClassName: azure-file-storage
  mountPath: /badgr_server/mediafiles

env:
  badgrUserName: whoa
  badgrEmail: whoa@who.int
  badgrPassword: YH5931FW29MREPJMJAF4OAMQQK9V528X9TDV5H1U

# https://artifacthub.io/packages/helm/bitnami/mysql#parameters
mysql:
  primary:
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    persistence:
      enabled: false
    service:
      port: 3306
  secondary:
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    persistence:
      enabled: false
    service:
      port: 3306
  image:
    registry: whoalxp.azurecr.io
    repository: whoa-mysql
    tag: "1.1"
    pullSecrets: ["who-lxp-imagepusher-secret"]
  auth:
    rootPassword: password
    database: badgr
    username: my-user
    password: my-password  # TODO: encrypt data 

managedDatabase:
  #enabled: false to use in-cluster database
  #enabled: true to use managed RDBMS database
  enabled: false
  # values will be overridden by the config repo based on the namespace
  # different values for database will be available in values-*.yaml file from the config repo
  auth:
    host: dummyval
    username: dummyval
    database: dummyval
    password: dummyval
    port: 3306

strategy:
  type: Recreate

busybox:
  image: "busybox"
  tag: "1.32"

testFramework:
  enabled: false
  image: "bats/bats"
  tag: "1.2.1"
  imagePullPolicy: IfNotPresent
  securityContext: {}

# Specify password for root user
#
# Default: random 10 character string
#mysqlRootPassword: password

# Create a database user
#
#mysqlUser: my-user
# Default: random 10 character string
#mysqlPassword: my-password

# Allow unauthenticated access, uncomment to enable
#
# mysqlAllowEmptyPassword: true

# Create a database
#
#mysqlDatabase: badgr

## Specify an imagePullPolicy (Required)
## It's recommended to change this to 'Always' if the image tag is 'latest'
## ref: http://kubernetes.io/docs/user-guide/images/#updating-images
##
imagePullPolicy: IfNotPresent

## Additionnal arguments that are passed to the MySQL container.
## For example use --default-authentication-plugin=mysql_native_password if older clients need to
## connect to a MySQL 8 instance.
args: []

livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3

## Persist data to a persistent volume
#persistence:
  #enabled: true
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  #accessMode: ReadWriteOnce
  #size: 8Gi
  #annotations: {}

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: 256Mi
    cpu: 100m

# Custom mysql configuration files path
configurationFilesPath: /etc/mysql/conf.d/

metrics:
  enabled: false
  image: prom/mysqld-exporter
  imageTag: v0.10.0
  imagePullPolicy: IfNotPresent
  resources: {}
  annotations: {}
    # prometheus.io/scrape: "true"
    # prometheus.io/port: "9104"
  livenessProbe:
    initialDelaySeconds: 15
    timeoutSeconds: 5
  readinessProbe:
    initialDelaySeconds: 5
    timeoutSeconds: 1
  flags: []
  serviceMonitor:
    enabled: false
    additionalLabels: {}
# OCP route
route: 
  # enable the OCP route
  enabled: true
  # enable https and auto redirect http to https
  https_redirect: false
  # configure the custom host name
  # by default openshift will assign a host name
  # if it is a private cluster it will assign the private route
  # else the public route
  custom_host:
    enabled: false
    name: badgr-badgr-labs-staging.apps.dev.lxp.academy.who.int

hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  cpuTarget: 200m
  memTarget: 750Mi
  cpuLimit: 400m
  memLimit: 1.5Gi
